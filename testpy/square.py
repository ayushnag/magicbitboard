from enum import IntEnum
import numpy as np

BitBoard = np.uint64

# class Square(IntEnum):
# 	a1=0x1; b1=0x2; c1=0x4; d1=0x8; e1=0x10; f1=0x20; g1=0x40; h1=0x80
# 	a2=0x100; b2=0x200; c2=0x400; d2=0x800; e2=0x1000; f2=0x2000; g2=0x4000; h2=0x8000
# 	a3=0x10000; b3=0x20000; c3=0x40000; d3=0x80000; e3=0x100000; f3=0x200000; g3=0x400000; h3=0x800000
# 	a4=0x1000000; b4=0x2000000; c4=0x4000000; d4=0x8000000; e4=0x10000000; f4=0x20000000; g4=0x40000000; h4=0x80000000
# 	a5=0x100000000; b5=0x200000000; c5=0x400000000; d5=0x800000000; e5=0x1000000000; f5=0x2000000000; g5=0x4000000000; h5=0x8000000000
# 	a6=0x10000000000; b6=0x20000000000; c6=0x40000000000; d6=0x80000000000; e6=0x100000000000; f6=0x200000000000; g6=0x400000000000; h6=0x800000000000
# 	a7=0x1000000000000; b7=0x2000000000000; c7=0x4000000000000; d7=0x8000000000000; e7=0x10000000000000; f7=0x20000000000000; g7=0x40000000000000; h7=0x80000000000000
# 	a8=0x100000000000000; b8=0x200000000000000; c8=0x400000000000000; d8=0x800000000000000; e8=0x1000000000000000; f8=0x2000000000000000; g8=0x4000000000000000; h8=0x8000000000000000,
# 	NO_SQUARE=0x0

class Square(IntEnum):
	a1, b1, c1, d1, e1, f1, g1, h1, a2, b2, c2, d2, e2, f2, g2, h2, a3, b3, c3, d3, e3, f3, g3, h3, a4, b4, c4, d4, e4, f4, g4, h4, a5, b5, c5, d5, e5, f5, g5, h5, a6, b6, c6, d6, e6, f6, g6, h6, a7, b7, c7, d7, e7, f7, g7, h7, a8, b8, c8, d8, e8, f8, g8, h8 = range(64)


MASK_FILE: tuple[BitBoard, ...] = (
	0x101010101010101, 0x202020202020202, 0x404040404040404, 0x808080808080808,
	0x1010101010101010, 0x2020202020202020, 0x4040404040404040, 0x8080808080808080,
)

# Precomputed rank masks
MASK_RANK: tuple = (
	0xff, 0xff00, 0xff0000, 0xff000000,
	0xff00000000, 0xff0000000000, 0xff000000000000, 0xff00000000000000
)

# Precomputed diagonal masks
MASK_DIAGONAL: tuple = (
	0x80, 0x8040, 0x804020,
	0x80402010, 0x8040201008, 0x804020100804,
	0x80402010080402, 0x8040201008040201, 0x4020100804020100,
	0x2010080402010000, 0x1008040201000000, 0x804020100000000,
	0x402010000000000, 0x201000000000000, 0x100000000000000,
)

# Precomputed anti-diagonal masks
MASK_ANTI_DIAGONAL: tuple = (
	0x1, 0x102, 0x10204,
	0x1020408, 0x102040810, 0x10204081020,
	0x1020408102040, 0x102040810204080, 0x204081020408000,
	0x408102040800000, 0x810204080000000, 0x1020408000000000,
	0x2040800000000000, 0x4080000000000000, 0x8000000000000000,
)

AFILE, BFILE, CFILE, DFILE, EFILE, FFILE, GFILE, HFILE = range(8)
RANK1, RANK2, RANK3, RANK4, RANK5, RANK6, RANK7, RANK8 = range(8)
PAWN, KNIGHT, BISHOP, ROOK, QUEEN, KING = range(6)

def rank_of(s: Square):
    return s >> 3

def file_of(s: Square):
    return s & 0b111

def diagonal_of(s: Square):
    return 7 + rank_of(s) - file_of(s)

def anti_diagonal_of(s: Square):
    return rank_of(s) + file_of(s)